name: Deploy to Firebase App Distribution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testers'
        type: choice
        options:
        - testers
        - qa
        - developers

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx2048m

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:ci || echo "Tests failed - continuing with build..."
      
    - name: Build Angular app
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: angular-build
        path: dist/

  build-android:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: angular-build
        path: dist/
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: '33'
        build-tools: '33.0.0'
        ndk-version: '25.1.8937393'
        cmake-version: '3.22.1'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Cache Android build
      uses: actions/cache@v4
      with:
        path: |
          android/.gradle
          android/app/build
        key: ${{ runner.os }}-android-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-android-
          
    - name: Sync Capacitor
      run: npx cap sync
      
    - name: Build Debug APK
      run: |
        cd android
        ./gradlew assembleDebug --no-daemon --parallel
        cd ..
        
    - name: Build Release APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon --parallel
        cd ..
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apks
        path: |
          android/app/build/outputs/apk/debug/app-debug.apk
          android/app/build/outputs/apk/release/app-release.apk

  deploy-firebase:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apks
        path: android/app/build/outputs/apk/
        
    - name: Deploy Debug APK to Firebase
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        groups: ${{ github.event.inputs.environment || 'testers' }}
        file: android/app/build/outputs/apk/debug/app-debug.apk
        releaseNotes: |
          üöÄ Debug Build - Audio Recorder App
          
          üì± Build Info:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Build Time: ${{ github.event.head_commit.timestamp }}
          - Workflow: ${{ github.workflow }}
          
          üîß Changes: ${{ github.event.head_commit.message }}
          
    - name: Deploy Release APK to Firebase
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        groups: ${{ github.event.inputs.environment || 'testers' }}
        file: android/app/build/outputs/apk/release/app-release.apk
        releaseNotes: |
          üöÄ Release Build - Audio Recorder App
          
          üì± Build Info:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Build Time: ${{ github.event.head_commit.timestamp }}
          - Workflow: ${{ github.workflow }}
          
          üîß Changes: ${{ github.event.head_commit.message }}
          
    - name: Comment PR with download link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üéâ **APK Ready for Testing!**\n\nYour APK has been deployed to Firebase App Distribution.\n\nüì± **Download Link**: Check your email or Firebase console for the download link.\n\nüîç **Build Info**:\n- Commit: `${{ github.sha }}`\n- Branch: `${{ github.ref_name }}`\n- Build Time: `${{ github.event.head_commit.timestamp }}`'
          })

  notify:
    needs: [deploy-firebase]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify on success
      if: needs.deploy-firebase.result == 'success'
      run: |
        echo "‚úÖ Firebase deployment successful!"
        echo "üì± APKs deployed to Firebase App Distribution"
        echo "üîó Check Firebase console for download links"
        
    - name: Notify on failure
      if: needs.deploy-firebase.result == 'failure'
      run: |
        echo "‚ùå Firebase deployment failed!"
        echo "üîç Check the workflow logs for details"
