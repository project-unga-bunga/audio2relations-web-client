name: Versioned Build & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      increment_version:
        description: 'Increment version for this build'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  ANDROID_SDK_VERSION: '35'

jobs:
  version-setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
      version-code: ${{ steps.version.outputs.version-code }}
      git-commit: ${{ steps.version.outputs.git-commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for commit hash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup version information
        id: version
        run: |
          # Set environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "NODE_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
          else
            echo "NODE_ENV=development" >> $GITHUB_ENV
          fi
          
          # Increment version if requested or if it's a main branch push
          if [ "${{ github.event.inputs.increment_version }}" = "true" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ðŸ”„ Incrementing version for production build..."
            npm run version:increment
          fi
          
          # Generate version files
          npm run build:version
          
          # Extract version information
          VERSION_INFO=$(node -e "
            const config = require('./version.config.js');
            console.log(JSON.stringify({
              version: config.version,
              buildNumber: config.buildNumber,
              versionCode: config.versionCode,
              gitCommit: config.gitCommit
            }));
          ")
          
          echo "version=$(echo $VERSION_INFO | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "build-number=$(echo $VERSION_INFO | jq -r '.buildNumber')" >> $GITHUB_OUTPUT
          echo "version-code=$(echo $VERSION_INFO | jq -r '.versionCode')" >> $GITHUB_OUTPUT
          echo "git-commit=$(echo $VERSION_INFO | jq -r '.gitCommit')" >> $GITHUB_OUTPUT
          
          echo "ðŸ“± Version: $(echo $VERSION_INFO | jq -r '.version')"
          echo "ðŸ”¢ Build Number: $(echo $VERSION_INFO | jq -r '.buildNumber')"
          echo "ðŸ“¦ Version Code: $(echo $VERSION_INFO | jq -r '.versionCode')"

      - name: Upload version artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            version.config.js
            src/assets/version.json
            src/environments/environment.ts
            android/variables.gradle
            android/app/build.gradle

  build-web:
    needs: version-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download version artifacts
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: npm run build:prod
        env:
          NODE_ENV: ${{ needs.version-setup.outputs.environment }}

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/

  build-android:
    needs: version-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download version artifacts
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: npm ci

      - name: Build Android APK
        run: npm run build:android:release
        env:
          NODE_ENV: ${{ needs.version-setup.outputs.environment }}

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

  deploy-firebase:
    needs: [version-setup, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./

      - name: Download version artifacts
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase App Distribution
        run: |
          # Install Firebase CLI for app distribution
          npm install -g firebase-tools
          
          # Deploy APK to Firebase App Distribution
          firebase appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups testers \
            --release-notes "Version ${{ needs.version-setup.outputs.version }} (Build ${{ needs.version-setup.outputs.build-number }}) - Automated build from ${{ github.sha }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  create-release:
    needs: [version-setup, build-web, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build/

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: android-apk/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-setup.outputs.version }}-${{ needs.version-setup.outputs.build-number }}
          name: Release v${{ needs.version-setup.outputs.version }} (Build ${{ needs.version-setup.outputs.build-number }})
          body: |
            ## Version ${{ needs.version-setup.outputs.version }} (Build ${{ needs.version-setup.outputs.build-number }})
            
            **Version Code:** ${{ needs.version-setup.outputs.version-code }}
            **Git Commit:** ${{ needs.version-setup.outputs.git-commit }}
            **Build Date:** ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            - Automated build from CI/CD pipeline
            - Version management system integration
            - Firebase distribution ready
            
            ### Downloads
            - Android APK attached
            - Web build available in artifacts
          files: |
            android-apk/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
